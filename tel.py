import os
import threading
from flask import Flask
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, filters

# Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥—É
app_flask = Flask(__name__)

@app_flask.route('/')
def home():
    return "–ë–æ—Ç –ø—Ä–∞—Ü—é—î! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ Telegram –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ –±–æ—Ç–æ–º."

def run_flask():
    port = int(os.environ.get('PORT', 10000))
    app_flask.run(host="0.0.0.0", port=port)

# –ó–∞–ø—É—Å–∫–∞—î–º–æ Flask —É –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
threading.Thread(target=run_flask, daemon=True).start()

# –ó–∞–ø–∏—Ç–∞–Ω–Ω—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
questions = [
    "1. –í–≤–µ–¥—ñ—Ç—å –≤–∞—Ä—Ç—ñ—Å—Ç—å –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ—ó –ø—Ä—è–∂—ñ (–≥—Ä–Ω):",
    "2. –í–≤–µ–¥—ñ—Ç—å —Ç–æ–≤–∞—Ä–æ-—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏ (–≥—Ä–Ω):",
    "3. –í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É –Ω–∞–ø–æ–≤–Ω—é–≤–∞—á–∞ –∑–∞ 100 –≥ (–≥—Ä–Ω):",
    "4. –í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∏—Ç—Ä–∞—á–µ–Ω–æ–≥–æ –Ω–∞–ø–æ–≤–Ω—é–≤–∞—á–∞ (–≤ –≥—Ä–∞–º–∞—Ö):",
    "5. –í–≤–µ–¥—ñ—Ç—å –≤–∞—Ä—Ç—ñ—Å—Ç—å –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤ (–≥—Ä–Ω):",
    "6. –í–≤–µ–¥—ñ—Ç—å —Å—É–º–∞—Ä–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å –¥—Ä—É–∫–æ–≤–∞–Ω–æ—ó –ø—Ä–æ–¥—É–∫—Ü—ñ—ó (–≥—Ä–Ω):",
    "7. –í–≤–µ–¥—ñ—Ç—å –≤–∞—Ä—Ç—ñ—Å—Ç—å –ø–∞–∫—É–≤–∞–Ω–Ω—è (–≥—Ä–Ω):",
    "8. –í–≤–µ–¥—ñ—Ç—å –¥–æ–≤–∂–∏–Ω—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ—ó –ø—Ä—è–∂—ñ (–≤ –º–µ—Ç—Ä–∞—Ö):"
]

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∫–Ω–æ–ø–æ–∫
START_CALCULATION = "start_calculation"

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
WELCOME_MESSAGE = """–í—ñ—Ç–∞—é! –Ø –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –≤–∞—Ä—Ç–æ—Å—Ç—ñ –≤'—è–∑–∞–Ω–æ–≥–æ –≤–∏—Ä–æ–±—É.

–Ø –¥–æ–ø–æ–º–æ–∂—É –≤–∏–∑–Ω–∞—á–∏—Ç–∏ —Å–æ–±—ñ–≤–∞—Ä—Ç—ñ—Å—Ç—å –≤–∞—à–æ–≥–æ –≤–∏—Ä–æ–±—É, –≤—Ä–∞—Ö–æ–≤—É—é—á–∏ –≤–∞—Ä—Ç—ñ—Å—Ç—å –ø—Ä—è–∂—ñ, –Ω–∞–ø–æ–≤–Ω—é–≤–∞—á–∞ —Ç–∞ —ñ–Ω—à–∏—Ö –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤.

–î–ª—è —Ç–æ–≥–æ, —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ:"""

ERROR_NUMBER_MESSAGE = "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ. –Ø–∫—â–æ –≤–∏—Ç—Ä–∞—Ç–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ (–¥–æ—Ä—ñ–≤–Ω—é—é—Ç—å –Ω—É–ª—é), –≤–≤–µ–¥—ñ—Ç—å —Ü–∏—Ñ—Ä—É 0."
START_FIRST_MESSAGE = "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start, —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º."
CALCULATION_COMPLETED_TITLE = "–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:"

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
users = {}

# ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ –±–æ—Ç–∞
ADMIN_USERS = [5219622676]  # –î–æ–¥–∞–π—Ç–µ —Å—é–¥–∏ —Å–≤—ñ–π ID

# –ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –≤–∞—Ä—Ç–æ—Å—Ç—ñ —Ä–æ–±–æ—Ç–∏
WORK_PRICE_MULTIPLIER = 1.3

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_admin(user_id):
    return user_id in ADMIN_USERS

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥—É —á–∏—Å–µ–ª
def parse_numeric_input(text):
    """
    –ü–∞—Ä—Å–∏—Ç—å –≤–≤–µ–¥–µ–Ω–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º –∑–Ω–∞—á–µ–Ω–Ω—è —è–∫ —á–∏—Å–ª–æ, –æ–±—Ä–æ–±–ª—è—é—á–∏ –∫—Ä–∞–ø–∫–∏ —ñ –∫–æ–º–∏.
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:
    - text: –≤–≤–µ–¥–µ–Ω–∏–π —Ç–µ–∫—Å—Ç
    
    –ü–æ–≤–µ—Ä—Ç–∞—î:
    - —á–∏—Å–ª–æ (float)
    - —É—Å–ø—ñ—à–Ω—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ—ó (bool)
    """
    if not text or not text.strip():
        return None, False
    
    # –ó–∞–º—ñ–Ω–∞ –∫–æ–º–∏ –Ω–∞ –∫—Ä–∞–ø–∫—É –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —Ä—ñ–∑–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤
    cleaned_text = text.replace(",", ".")
    
    try:
        value = float(cleaned_text)
        return value, True
    except ValueError:
        return None, False

# –§–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
RESULT_FORMAT = """
{title}
- –ü—Ä—è–∂–∞: {yarn_cost:.2f} –≥—Ä–Ω
- –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {transport:.2f} –≥—Ä–Ω
- –ù–∞–ø–æ–≤–Ω—é–≤–∞—á: {filler_total:.2f} –≥—Ä–Ω
- –î–æ–¥–∞—Ç–∫–æ–≤—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏: {extras:.2f} –≥—Ä–Ω
- –î—Ä—É–∫–æ–≤–∞–Ω–∞ –ø—Ä–æ–¥—É–∫—Ü—ñ—è: {printing:.2f} –≥—Ä–Ω
- –ü–∞–∫—É–≤–∞–Ω–Ω—è: {packaging:.2f} –≥—Ä–Ω
- –†–æ–±–æ—Ç–∞ (–¥–æ–≤–∂–∏–Ω–∞ x{multiplier}): {work_price:.2f} –≥—Ä–Ω

*–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: {total:.2f} –≥—Ä–Ω*

–î—è–∫—É—é –∑–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞! –î–ª—è –Ω–æ–≤–æ–≥–æ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start
"""

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async def stats_command(update, context):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞.
    –î–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.
    """
    user_id = update.effective_user.id
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É
    if not is_admin(user_id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return
    
    user_count = len(users)
    stats_message = f"""üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞*

üë• –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {user_count}

*–ü—Ä–∏–º—ñ—Ç–∫–∞*: –¶—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω—É–ª—è—î—Ç—å—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞, –æ—Å–∫—ñ–ª—å–∫–∏ –¥–∞–Ω—ñ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –≤ –ø–∞–º'—è—Ç—ñ.
"""
    
    await update.message.reply_text(stats_message, parse_mode="Markdown")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–≤—ñ–¥–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
async def admin_help(update, context):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–æ–≤—ñ–¥–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.
    """
    user_id = update.effective_user.id
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É
    if not is_admin(user_id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return
    
    help_message = """*–ö–æ–º–∞–Ω–¥–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞*

/stats - –ø–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞
/help_admin - —Ü–µ–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥

–î–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –≤–≤–µ–¥—ñ—Ç—å /start"""
    
    await update.message.reply_text(help_message, parse_mode="Markdown")

# –°—Ç–∞—Ä—Ç–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞
async def start(update, context):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start.
    –í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–æ—é –¥–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É.
    """
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É
    keyboard = [
        [InlineKeyboardButton("–†–æ–∑–ø–æ—á–∞—Ç–∏ —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫", callback_data=START_CALCULATION)],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await update.message.reply_text(
        f"–í—ñ—Ç–∞—é, {user_name}! {WELCOME_MESSAGE}", 
        reply_markup=reply_markup
    )

# –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫—É
async def button(update, context):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫—É.
    –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î —Å–µ—Å—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –∑–∞–ø—É—Å–∫–∞—î –ø—Ä–æ—Ü–µ—Å –∑–±–æ—Ä—É –¥–∞–Ω–∏—Ö.
    """
    query = update.callback_query
    user_id = query.from_user.id
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if query.data == START_CALCULATION:
        users[user_id] = {'step': 0, 'answers': []}
        
        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä—à–æ–≥–æ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è
        await query.answer()
        await query.edit_message_text(text=questions[0])

# –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö
async def handle_input(update, context):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.
    –í–∞–ª—ñ–¥—É—î –≤–≤–µ–¥–µ–Ω–Ω—è, –∑–±–µ—Ä—ñ–≥–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Ç–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫—Ä–æ–∫—É.
    """
    user_id = update.effective_user.id
    text = update.message.text
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ—á–∞–≤ —Å–µ—Å—ñ—é
    if user_id not in users:
        await update.message.reply_text(START_FIRST_MESSAGE)
        return
    
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫—Ä–æ–∫—É
    step = users[user_id]['step']
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –≤–≤–µ–¥–µ–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è
    value, success = parse_numeric_input(text)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É—Å–ø—ñ—à–Ω–æ—Å—Ç—ñ –ø–∞—Ä—Å–∏–Ω–≥—É
    if not success:
        await update.message.reply_text(ERROR_NUMBER_MESSAGE)
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤—ñ–¥'—î–º–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
    if value < 0:
        await update.message.reply_text("–ó–Ω–∞—á–µ–Ω–Ω—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥'—î–º–Ω–∏–º. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥–æ–¥–∞—Ç–Ω—î —á–∏—Å–ª–æ –∞–±–æ 0.")
        return
    
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —Å–ø–∏—Å–æ–∫
    users[user_id]['answers'].append(value)
    users[user_id]['step'] += 1
    step = users[user_id]['step']
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞–ø–∏—Ç—ñ–≤
    if step < len(questions):
        await update.message.reply_text(questions[step])
    else:
        try:
            # –ü–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è
            answers = users[user_id]['answers']
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
            if len(answers) != len(questions):
                raise ValueError(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π: {len(answers)}")
            
            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
            yarn_cost = answers[0]
            transport = answers[1]
            filler_price_per_100g = answers[2]
            filler_grams = answers[3]
            extras = answers[4]
            printing = answers[5]
            packaging = answers[6]
            yarn_length = answers[7]
            
            # –ë–µ–∑–ø–µ—á–Ω—ñ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–∏ –Ω–∞–ø–æ–≤–Ω—é–≤–∞—á–∞ (–∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –Ω—É–ª—å–æ–≤–∏—Ö –∑–Ω–∞—á–µ–Ω—å)
            if filler_grams <= 0 or filler_price_per_100g <= 0:
                filler_total = 0
            else:
                filler_total = (filler_price_per_100g / 100) * filler_grams
            
            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–∞—Ä—Ç–æ—Å—Ç—ñ —Ä–æ–±–æ—Ç–∏
            if yarn_length <= 0:
                work_price = 0
            else:
                work_price = yarn_length * WORK_PRICE_MULTIPLIER
            
            # –ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å
            total = yarn_cost + transport + filler_total + extras + printing + packaging + work_price
            
            # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —ñ –≤–∏–≤–µ–¥–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
            result_message = RESULT_FORMAT.format(
                title=CALCULATION_COMPLETED_TITLE,
                yarn_cost=yarn_cost,
                transport=transport,
                filler_total=filler_total,
                extras=extras,
                printing=printing,
                packaging=packaging,
                work_price=work_price,
                multiplier=WORK_PRICE_MULTIPLIER,
                total=total
            )
            
            await update.message.reply_text(result_message, parse_mode="Markdown")
        except Exception as e:
            # –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ –≤ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–∞—Ö
            error_message = f"–í–∏–±–∞—á—Ç–µ, –ø—ñ–¥ —á–∞—Å —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {str(e)}"
            await update.message.reply_text(error_message)
        finally:
            # –í–∏–¥–∞–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
            if user_id in users:
                users.pop(user_id)

def main():
    """
    –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞.
    """
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—É –∑ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    TOKEN = os.environ.get('TELEGRAM_TOKEN')
    
    if not TOKEN:
        # –Ø–∫—â–æ —Ç–æ–∫–µ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏–π —Ç–æ–∫–µ–Ω –¥–ª—è —Ç–µ—Å—Ç—ñ–≤
        # –£ —Ä–µ–∞–ª—å–Ω–æ–º—É –¥–æ–¥–∞—Ç–∫—É —Ü–µ–π —Ä—è–¥–æ–∫ —Å–ª—ñ–¥ –∑–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—É –∑ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
        TOKEN = "7930140233:AAEsNNbsGS7oQgbiR9q_scPYZtOqfYDSiKg"  # –í–∞—à —Ç–æ–∫–µ–Ω
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∑–µ–º–ø–ª—è—Ä—É –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É
    application = ApplicationBuilder().token(TOKEN).build()
    
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button, pattern=START_CALCULATION))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_input))
    
    # –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("help_admin", admin_help))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    application.run_polling()

if __name__ == "__main__":
    main()